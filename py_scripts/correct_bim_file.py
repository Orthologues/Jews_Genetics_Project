'''
This script is written by Jiawei Zhao on June 7th, 2021.
Python 3.6+ is required to run this script.
Before running this script, user should run:
1. "plink --bfile ref --merge-list to_merge.txt --make-bed --out merged"
2. "plink --bfile merged --list-duplicate-vars"
This script aims at processing incorrectly merged file by PLINK by removing redundant same-position SNPs and to rewrite .bim/.map file
'''

import argparse
import os

# Returns to a post-processing snp_dict
def process_snp_dict(ref_map: str, dup_fn: str) -> dict: 
    ref_snp_dict = {}
    # redirects duplicates to the rs-id to be merged against
    uniq_dup_snp_dict = {}
    with open(ref_map, "r") as f:
        for line in f: 
            if not line.startswith("#"): 
                snp_id = line.split("\t")[1]
                ref_snp_dict[snp_id] = "" 
    # print(len(ref_snp_dict.items()))
    # read .dupvar file generated by PLINK
    with open(dup_fn, "r") as f:
        f.readline()
        for line in f:
            cut_tab_list = line.strip().split("\t")
            snp_id_str = cut_tab_list[3].strip()
            snp_id1 = snp_id_str.split(" ")[0]
            snp_id2 = snp_id_str.split(" ")[1]
            if snp_id2 in ref_snp_dict and snp_id1 not in ref_snp_dict:
                if snp_id2.startswith("rs"):
                    uniq_dup_snp_dict[snp_id1] = snp_id2
                else:
                    uniq_dup_snp_dict[snp_id2] = snp_id1
            elif snp_id1 in ref_snp_dict and snp_id2 not in ref_snp_dict:
                if snp_id1.startswith("rs"):
                    uniq_dup_snp_dict[snp_id2] = snp_id1
                else:
                    uniq_dup_snp_dict[snp_id1] = snp_id2
    # return to the redirecting dict
    print(len(list(uniq_dup_snp_dict.items())))
    return uniq_dup_snp_dict

# rewrites the .map/.bim file according to the redirecting dict as well renames the original file as $FILENAME.bk
def rewrite_plink_map(redirecting_snp_dict: dict, bim_f1: str, bim_f2: str):
    # rename the original .bim file as $FILENAME.bk
    os.rename(bim_f1, f"{bim_f1}.bk")
    new_bim1_f = open(bim_f1, "w")
    with open(f"{bim_f1}.bk", "r") as f:
        for line in f:
            snp_id = line.split("\t")[1]
            if snp_id in redirecting_snp_dict:
                # print(redirecting_snp_dict[snp_id])
                replaced_line = line.replace(snp_id, redirecting_snp_dict[snp_id], 1)
                new_bim1_f.write(replaced_line)
            else:
                new_bim1_f.write(line)
    new_bim1_f.close()
    # rename the original .bim file as $FILENAME.bk
    os.rename(bim_f2, f"{bim_f2}.bk")
    new_bim2_f = open(bim_f2, "w")
    with open(f"{bim_f2}.bk", "r") as f:
        for line in f:
            snp_id = line.split("\t")[1]
            if snp_id in redirecting_snp_dict:
                # print(redirecting_snp_dict[snp_id])
                replaced_line = line.replace(snp_id, redirecting_snp_dict[snp_id], 1)
                new_bim2_f.write(replaced_line)
            else:
                new_bim2_f.write(line)
    new_bim2_f.close()

# main function using argparse
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--ref-map", help="Specifies the filename of .bim/.map file in PLINK format which was merged against", \
                        required=True)
    parser.add_argument("--dupvar", help="Specifies the filename of .dupvar file generated by 'plink \
    --list-duplicate-vars'", required=True)
    parser.add_argument("--bim1", help="Specifies the filename of .bim/.map file of the PLINK file \
    specified by --file/--bfile (plink merge)", required=True)
    parser.add_argument("--bim2", help="Specifies the filename of .bim/.map file of the PLINK file \
    listed at --merge-list (plink merge)", required=True)
    args = parser.parse_args()
    # convert the parameters to correct types
    ref_map = str(args.ref_map)
    dup_f = str(args.dupvar)
    bim1 = str(args.bim1)
    bim2 = str(args.bim2)
    # Check the correctness of other input parameters
    if not dup_f.endswith(".dupvar"):
        print("--dup must end with '.dupvar'!")
        exit(1)
    if not ref_map.endswith(".bim") and not ref_map.endswith(".map"):
        print("--ref-map must end with either '.bim' or '.map'!")
        exit(1)
    if not bim1.endswith(".bim") and not bim1.endswith(".map"):
        print("--bim1 must end with either '.bim' or '.map'!")
        exit(1)
    if not bim2.endswith(".bim") and not bim2.endswith(".map"):
        print("--bim2 must end with either '.bim' or '.map'!")
        exit(1)
    # start to create a correct dictionary according to $ref_map and $dup_f 
    redirecting_snp_dict = process_snp_dict(ref_map, dup_f)
    rewrite_plink_map(redirecting_snp_dict, bim1, bim2)
